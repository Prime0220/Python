# ### set ###
#
# 제목 : 집합 (set) 자료형)
#
# 비고 : 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형

a = set([1, 2, 3, 4, 5])
a1 = [8, 9, 2, 7, 5, 3, 8, 2, 5, 3, 7, 3, 5, 5, 7]
a2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])
a3 = set([3, 6, 9, 12, 15])
b = set("love")
c = set()
d = set('I Love You')

print("\n", '--' * 45, "\n") # 구분 라인

print('a = ', a)
print('b = ', b)
print('c = ', c)
print('d = ', d)
print()
print('a1   =   ', a1 ) # 중복을 제거하는 용도로 쓰기도 한다
print()
print('a2dl %s이고 a3일때,' %(a2 | a3)) # %d로 하면 에러남
print('a2와 a3의 합집합은 : ', a2 | a3) # = a2.intersection(a3)
print('a2와 a3의 교집합은 : ', a2 & a3) # = a2.union(a3)
print('a2와 a3의 차집합은 : ', a2 - a3) # = a2.difference(a3)
print('a3와 a2의 차집합은 : ', a2 - a3) # = a3.difference(a2)
print()
a2.add(10)
print('a2에  값 하나 추가하기   : a2.add(10)                    ==> ', a2)
a2.update([11, 12, 13])
print('a2에 값 여러개 추가하기 : a2.update([11, 12, 13])  ==> ', a2)
a2.remove(13)
print('a2에 특정값 제거하기     : a2.remove(13)              ==> ', a2)

print("\n", '--' * 45, "\n") # 구분 라인 

# # 파이썬의 문자여 형식화

# 파이썬에서는 복잡한 출력을 위한 문자열 형식화 (string formatting)를 지원한다. 문자열을 형식화하는
# 방법에는 % 기호를 사용한 방식과 format 메소드를 사용한 방식이 있다.

# ## % 기호를 사용한 문자열 형식화

# 문자열 뒤에 % 기호를 붙이고 그 뒤에 다른 값을 붙이면 뒤에 붙은 값이 문자열 안으로 들어간다.
#
#   "문자열" % 값
#
# 이 때 문자열의 어느 위치에 값이 들어가는지를 표시하기 위해 문자열 안에 % 기호로 시작하는 형식지정
# 문자열 (format specification string)을 붙인다. 대표적인 형식지정 문자열은 다음과 같다.
#
# 형식지정 문자열 의미
#   --
#   %s  문자열
#   %d  정수
#   %f   부동소수점 실수

# 표 6.1 : 대표적인 형식지정 문자열 

# 다음은 % 기호를 사용한 문자열 형식이 예이다.

print("내 이름은  %s입니다. " % "이화준")

print("나는 %d입니다." %(18))

print("원주율 의 값은 %f입니다. " % 3.14159226535897)

print("\n", '--' * 45, "\n")

# 만역 여러개의 값을 문자열 안에 넣어야 한다면 % 기호 뒤에 있는 값을 소괄호로 감싸야 한다.

print("%d x %d = %d 이다. " % (2, 3, 6))

print("%s의 %s 과목 점수는 %d점이다. " %("화준", "통합과학", 91))

print("\n", '--' * 45, "\n")

# #### 연습문제 1
#
#       1. name과 age라는 변수에 각각 이름과 나이를 넣고 다음과 같이 출력하는 코드를 만들어라
#
#           Tom is 13 years old
#
#
#       2. a, b라는 변수에 10과 3이라는 값을 대입하라. 이 변수 a, b와 문자열 형식화를
#           사용하여 다음과 가은 문자열을 출력하는 코드를 만들어라
#
#           10 / 3 = 3.333
#

#           1번
name, age = map(str, input("공백을 기준으로 이름과 나이를 입력해주세요 : ").split(' '))

print("%s is %s years old" %(name, age))

print("\n", '--' * 45, "\n")

#           2번
a = 10
b = 3

print("%d / %d =  %.3f" %(a, b, a/b))

print("\n", '--' * 45, "\n")

# ## 고급 형식지정 문자열

#   형식지정 문자열은 여러가지 숫자 인수를 가질 수도 있다. % 기호 다음에 오는 정수는 값이 인쇄될 때
#   차지하는 공간의 길이를 뜻한다. 만약 공간의 길이가 인쇄될 값보다 크면 정수가 양수일 때는 값을 뒤로
#   보내고 공백을 앞에 채우거나 반대로 정수가 음수이면 값을 앞으로 보내고 공백을 뒤에 채운다.
#   그만큼의 숫자만 인쇄하라는 뜻이다.

#   고급 형식지정 문자열 의미
#   --
#   %20s     전체 20칸을 차지하는 문자열(공백을 앞에 붙인다.)
#   %-10d   전체 10칸을  차지하는 숫자(공백을 뒤에 붙인다.)
#   %.5f       부동소수점이 소수점 아래 5자리까지 표시

#   표 3.2.2 : %방식의 고급 형식지정 문자열

print("[%20s]" % "*") # [와 ] 사이에 20칸의 공백이 있다.

print("[%-20s]" % "A") # 20칸의 공백의 앞쪽에 A를 인쇄한다.

print("[%20d]" % 123) # 20칸의 공백의 뒷쪽에 123을 인쇄한다.

print("[%-20d]" % 123) # 20칸의 공백의 앞쪽에 123을 인쇄한다.

print("\n", '--' * 45, "\n")

x = 1 / 3.0 # 값은 -.333333.....
print("%0.5f" % x)  # 소숫점 아래 5자리까지만 인쇄한다.

print("\n", '--' * 45, "\n")

# 공백 크기와 소숫점 아래 자릿수를 같이 지정할 수도 있다.

print("[%-20.6f]" % x)

print("\n", '--' * 45, "\n")

# ## format 메소드를 사용한 문자열 형식화

# format 메소드를 사용하여 문자열을 형식화할 수도 있다. 이 때는 % 기호로 시작하는 형식지정
# 문자열 대신 { } 기호를 사용한다. 또한 자료형을 표시할 필요가 없다.

print("내 이름은 {} 입니다.".format("이화준"))
