# ##  입력이 여러 개인 함수 ## #

#   함수의 입력은 한 개가 아니라 여러개가 되어도 상관 없다. 입력 변수가  여러개이면 쉼표를 사용하여
#   함수를 정의한다. 입력 변수는 원하는 만큼 얼마든지 만들 수 있다.

# def 함수이름 (입력변수1, 입력변수2, 입력변수3) :
#       출력변수를 만드는 명령
#       return 출력변수이름
#

def add(x, y) :
    return x+y

a = add(1, 2)
print(a)

print("\n", '--' * 45, "\n")

def sum(a, b, c) :
    s = a + b + c
    return s
print(sum(1, 2, 3))

print("\n", '--' * 45, "\n")

# #### [ 도전 문제 3 ] #### #
#
#   연도를 나타내는 숫자와 월을 나타내는 숫자를 입력하면 그 달의 날짜 수를 반환하는 함수 days2를 만든다.
#   사용 예는 다음과 같다.
#
#   print(days2(2015, 1))
#   31

  
Day31 = {1, 3, 5, 7, 8, 10, 12}
Day30 = {4, 6, 9, 11}

def days2(yearmon) :
    year = int(yearmon[0:4])
    mon = int(yearmon[4:6])
    if mon in Day31 :
        day = 31
    elif mon in Day30 :
        day = 30
    else :
        if (year % 4 == 0 and year % 100 != 0 or year % 400 == 0) :
            day = 29
        else :
            day = 28
    return day

yearmon = input("몇년 몇월인지 입력해주세요 (ex) 201501) : ")
print(days2(yearmon))

print("\n", '--' * 45, "\n")


# ## 람다 함수 (익명 함수) ## # 
#
#   함수에 이름을 주지 않거나 코드를 짧게 줄여쓰는 방법으로 람다(lambda)함수라는 것이 있다.
#   예를 들어               lambda 매개변수들 : 식

def f(x) :
    return 2 * x

# 이 함수 f는 다음 람다 함수와 같다.

f = lambda x : 2 * x            # x는 매개변수   2 * x 는 리턴값
print(f(2))

print("\n", '--' * 45, "\n")

#   람다 표현식 자체를 호출하기 : 람다 표현식은 변수에 할당하지 않고 람다 표현식 자체를 바로 호출할 수 있습니다.
#   다음과 같이 람다 표현식을 ( )로 묶은 뒤에 다시 ( )를 붙이고 인수를 넣어서 호출하면 됩니다.  (lambda 매개변수 : 식) (인수)

print((lambda x :  x + 10)(1))

print("\n", '--' * 45, "\n")

#   람다 표현식에서 주의할 점은 람다 표현식 안에서는 새 변수르 만들 수 없다는 점입니다. 따라서 반환값 부분은 변수 없이
#   식 한 줄로 표현할 수 있어야 합니다. 변수가 필요한 코드일 경우에는 def로 함수를 작성하는 것이 좋습니다.

print("print((lambda x : y = 10; x + y)(1))  " , " #lambda 함수 안에서 변수 y 사용할 수 없음.")

print("\n", '--' * 45, "\n")

# 단, 람다 표현식 바깥에 있는 변수는 사용할 수 있습니다. 다음은 매개변수 x와 람다 표현식 바깥에 있는
# 변수 y를 더해서 반환합니다.

y = 10
print((lambda x : x + y)(1))

print("\n", '--' * 45, "\n")

# 람다 함수는  함수 자체를 다른 함수의 인수로 넣을 때, 함수의 출력값을 함수로 받을 때 유용하게 사용된다.
# 람다 표현식을 사용하기 전에 먼저 def로 함수를 만들어서 map을 사용해보겠습니다.
# 다음과 같이 숫자를 받은 뒤 
#
#
#




